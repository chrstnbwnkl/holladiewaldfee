# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QRoutingDialog
                                 A QGIS plugin
 t
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-07-09
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Chris
        email                : test
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import QtWidgets
from qgis.PyQt.QtGui import QIcon
from qgis.gui import QgisInterface, QgsMapTool
from PyQt5.QtWidgets import QApplication

import json
import os.path
import sys
from qgis.core import (
                        QgsProject,
                        QgsCoordinateTransform,
                        QgsCoordinateReferenceSystem,
                        QgsPointXY,
                        QgsVectorLayer,
                        QgsLineString,
                        QgsFeature,
                        QgsRectangle,
                        QgsPoint,
                        QgsGeometry
                        )
from qgis.PyQt.QtWidgets import QMessageBox

from ..ui.qrouting_dialog_base_ui import Ui_QRoutingDialogBase
from ..core.maptool import PointTool
from ..util.util import maybe_transform_wgs84
from ..core.client import QClient

current_dir = os.path.dirname(os.path.abspath(__file__))
rp_path = os.path.join(current_dir, "../third_party", "routing-py")
sys.path.append(rp_path)
from routingpy import get_router_by_name


class QRoutingDialog(QtWidgets.QDialog, Ui_QRoutingDialogBase):
    def __init__(self, iface: QgisInterface, parent=None):
        """Constructor."""
        super(QRoutingDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface

        self.point_tool = PointTool(iface.mapCanvas())
        self.last_map_tool: QgsMapTool = None
        icon = QIcon(":images/themes/default/cursors/mCapturePoint.svg")
        self.from_map_button.setIcon(icon)
        self.to_map_button.setIcon(icon)
        self.crs_input.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))

        self.finished.connect(self.result)
        self.from_map_button.clicked.connect(self._on_map_click_from)
        self.to_map_button.clicked.connect(self._on_map_click_to)

    def result(self, result):
        if result:
            project = QgsProject.instance()
            from_text = self.from_xy.value()
            to_text = self.to_xy.value()
            crs_input = self.crs_input.crs()
            crs_out = QgsCoordinateReferenceSystem('EPSG:4326')
            provider = self.provider.currentText()
            try:
                from_yx = [float(coord.strip()) for coord in from_text.split(',')]
                to_yx = [float(coord.strip()) for coord in to_text.split(',')]
            except:
                QMessageBox.critical(self.iface.mainWindow(),
                                     'QuickAPI error',
                                     "Did you really specify a coordinate in comma-separated Lat Long?\nExiting...")
                return

            from_point = QgsPointXY(*reversed(from_yx))
            to_point = QgsPointXY(*reversed(to_yx))

            if crs_input.authid() != 'EPSG:4326':
                xform = QgsCoordinateTransform(crs_input,
                                               crs_out,
                                               project)
                from_point_transform = xform.transform(from_point)
                to_point_transform = xform.transform(from_point)
                from_point = from_point_transform
                to_point = to_point_transform

            base_url = "http://localhost:8002" if provider == "Valhalla" else "http://localhost:5000"
            profile = "auto" if provider == "Valhalla" else "driving"

            router = get_router_by_name(provider.lower())(base_url=base_url, client=QClient)
            locations = [[from_point.x(), from_point.y()], [to_point.x(), to_point.y()]]
            direction_args = {"locations": locations, "profile": profile}
            if provider == "OSRM":
                direction_args.update({"overview": "full"})
            directions = router.directions(**direction_args)
            layer_out = QgsVectorLayer("LineString?crs=EPSG:4326",
                                       f"{provider} Route",
                                       "memory")

            if provider == "OSRM":
                line = QgsLineString([QgsPoint(*reversed(coords)) for coords in directions.geometry])
            else:
                line = QgsLineString([QgsPoint(*coords) for coords in directions.geometry])
            feature = QgsFeature()
            feature.setGeometry(QgsGeometry(line))

            layer_out.dataProvider().addFeature(feature)
            layer_out.renderer().symbol().setWidth(1)
            layer_out.updateExtents()
            project.addMapLayer(layer_out)
            self._zoom_to_extent(layer_out, project)

    def _zoom_to_extent(self, layer, project):
        ext = layer.extent()
        _bbox = []
        min_y, max_x, max_y, min_x = ext.yMinimum(), ext.xMaximum(), ext.yMaximum(), ext.xMinimum()
        for p in [QgsPointXY(min_x, min_y), QgsPointXY(max_x, max_y)]:
            p = maybe_transform_wgs84(
                        p,
                        project.crs(),
                        QgsCoordinateTransform.ReverseTransform,
                    )
            _bbox.append(p)

        self.iface.mapCanvas().zoomToFeatureExtent(
            QgsRectangle(*_bbox)
        )

    def _on_map_click_from(self):
        self.hide()
        self.point_tool = PointTool(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.point_tool)
        self.point_tool.canvasClicked.connect(self._write_line_widget_from)
        self.point_tool.deactivated.connect(
            lambda: QApplication.restoreOverrideCursor()
        )

    def _on_map_click_to(self):
        self.hide()
        self.point_tool = PointTool(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.point_tool)
        self.point_tool.canvasClicked.connect(self._write_line_widget_to)
        self.point_tool.deactivated.connect(
            lambda: QApplication.restoreOverrideCursor()
        )

    def _write_line_widget_from(self, point: QgsPointXY):
        self.from_xy.setText(f"{point.y():.6f}, {point.x():.6f}")
        self._write_line_widget()

    def _write_line_widget_to(self, point: QgsPointXY):
        self.to_xy.setText(f"{point.y():.6f}, {point.x():.6f}")
        self._write_line_widget()

    def _write_line_widget(self):
        self.iface.mapCanvas().unsetMapTool(self.point_tool)
        self.show()
