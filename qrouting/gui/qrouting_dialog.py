# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QRoutingDialog
                                 A QGIS plugin
 t
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-07-09
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Chris
        email                : test
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import QtWidgets
from qgis.PyQt.QtGui import QIcon
from qgis.gui import QgisInterface, QgsMapTool, QgsTableWidgetItem
from PyQt5.QtWidgets import QApplication

import json
import os.path
import sys
from typing import List, Union
from qgis.core import (
                        QgsProject,
                        QgsCoordinateTransform,
                        QgsCoordinateReferenceSystem,
                        QgsPointXY,
                        QgsVectorLayer,
                        QgsLineString,
                        QgsFeature,
                        QgsRectangle,
                        QgsPoint,
                        QgsGeometry
                        )
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt.QtCore import QPersistentModelIndex

from ..ui.qrouting_dialog_base_ui import Ui_QRoutingDialogBase
from ..core.maptool import PointTool
from ..util.util import to_wgs84
from ..util.resources import _locate_resource
from ..core.client import QClient
from ..core.routing import _get_profile_from_button_name
from ..ui.layer_select_dialog import LayerSelectDialog
from ..core.exceptions import InsufficientPoints

current_dir = os.path.dirname(os.path.abspath(__file__))
rp_path = os.path.join(current_dir, "../third_party", "routing-py")
sys.path.append(rp_path)
from routingpy import get_router_by_name
from routingpy.direction import Direction


class QRoutingDialog(QtWidgets.QDialog, Ui_QRoutingDialogBase):
    def __init__(self, iface: QgisInterface, parent=None):
        """Constructor."""
        super(QRoutingDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface

        self.point_tool = PointTool(iface.mapCanvas())
        self.last_map_tool: QgsMapTool = None
        self.set_icons()

        self.finished.connect(self.run)
        self.waypoint_widget.add_wp.clicked.connect(self._add_point)
        self.waypoint_widget.remove_wp.clicked.connect(self._remove_point)
        self.waypoint_widget.move_up.clicked.connect(self._move_item_up)
        self.waypoint_widget.move_down.clicked.connect(self._move_item_down)
        self.waypoint_widget.add_from_layer.clicked.connect(self._open_layer_selection)

    def run(self, result: int) -> None:
        """Run main functionality after pressing OK."""
        if result:
            locations = self.get_locations_from_table()
            selected_provider = self.provider.currentText()
            selected_method = self.provider.currentText()
            selected_profile = self.get_profile(selected_provider)
            directions = self.get_directions(selected_provider,
                                             selected_profile,
                                             selected_method,
                                             locations
                                             )

            self.add_result_layer(selected_provider, selected_profile, directions)

    def _zoom_to_extent(self, layer: QgsVectorLayer, project: QgsProject) -> None:
        """Zoom to the extent of a layer."""
        ext = layer.extent()
        _bbox = []
        min_y, max_x, max_y, min_x = ext.yMinimum(), ext.xMaximum(), ext.yMaximum(), ext.xMinimum()
        for p in [QgsPointXY(min_x, min_y), QgsPointXY(max_x, max_y)]:
            p = to_wgs84(
                        p,
                        project.crs(),
                        QgsCoordinateTransform.ReverseTransform,
                    )
            _bbox.append(p)

        self.iface.mapCanvas().zoomToFeatureExtent(
            QgsRectangle(*_bbox)
        )

    def _add_point(self) -> None:
        self.hide()
        self.point_tool = PointTool(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.point_tool)
        self.point_tool.canvasClicked.connect(self._add_to_table)
        self.point_tool.deactivated.connect(
            lambda: QApplication.restoreOverrideCursor()
        )

    def _add_to_table(self, point: QgsPointXY) -> None:
        row_index = self.waypoint_widget.coord_table.rowCount()
        self.waypoint_widget.coord_table.insertRow(row_index)
        self.waypoint_widget.coord_table.setItem(row_index, 0, QgsTableWidgetItem(f"{point.y():.6f}"))
        self.waypoint_widget.coord_table.setItem(row_index, 1, QgsTableWidgetItem(f"{point.x():.6f}"))
        self.waypoint_widget.coord_table.resizeColumnsToContents()
        self.iface.mapCanvas().unsetMapTool(self.point_tool)
        self.show()

    def _remove_point(self) -> None:
        row_indices = set(QPersistentModelIndex(index) for index in self.waypoint_widget.coord_table.selectedIndexes())
        for row_index in row_indices:
            self.waypoint_widget.coord_table.removeRow(row_index.row())

    def set_icons(self) -> None:
        # default QGIS icons
        add_point_icon = QIcon(":images/themes/default/symbologyAdd.svg")
        remove_points_icon = QIcon(":images/themes/default/mActionRemove.svg")
        add_layer_icon = QIcon(":images/themes/default/mActionAddLayer.svg")
        arrow_up_icon = QIcon(":images/themes/default/mActionArrowUp.svg")
        arrow_down_icon = QIcon(":images/themes/default/mActionArrowDown.svg")
        self.waypoint_widget.add_wp.setIcon(add_point_icon)
        self.waypoint_widget.remove_wp.setIcon(remove_points_icon)
        self.waypoint_widget.add_from_layer.setIcon(add_layer_icon)
        self.waypoint_widget.move_up.setIcon(arrow_up_icon)
        self.waypoint_widget.move_down.setIcon(arrow_down_icon)

        # custom icons
        self.profile_widget.profile_ped.setIcon(QIcon(_locate_resource("pedestrian.svg")))
        self.profile_widget.profile_mbike.setIcon(QIcon(_locate_resource("motorbike.svg")))
        self.profile_widget.profile_car.setIcon(QIcon(_locate_resource("car.svg")))
        self.profile_widget.profile_bike.setIcon(QIcon(_locate_resource("bike.svg")))
        self.profile_widget.profile_bus.setIcon(QIcon(_locate_resource("bus.svg")))

    def get_profile(self, provider: str) -> str:
        for button in self.profile_buttons:
            if button.isChecked():
                button_name = button.objectName()
                return _get_profile_from_button_name(button_name, provider)

    def _move_item_down(self) -> None:  # https://stackoverflow.com/a/11930967/10955832
        row = self.waypoint_widget.coord_table.currentRow()
        column = self.waypoint_widget.coord_table.currentColumn()
        if row < self.waypoint_widget.coord_table.rowCount()-1:
            self.waypoint_widget.coord_table.insertRow(row+2)
            for i in range(self.waypoint_widget.coord_table.columnCount()):
                self.waypoint_widget.coord_table.setItem(row+2, i, self.waypoint_widget.coord_table.takeItem(row, i))
                self.waypoint_widget.coord_table.setCurrentCell(row+2, column)
            self.waypoint_widget.coord_table.removeRow(row)

    def _move_item_up(self) -> None:
        row = self.waypoint_widget.coord_table.currentRow()
        column = self.waypoint_widget.coord_table.currentColumn();
        if row > 0:
            self.waypoint_widget.coord_table.insertRow(row - 1)
            for i in range(self.waypoint_widget.coord_table.columnCount()):
                self.waypoint_widget.coord_table.setItem(row - 1, i, self.waypoint_widget.coord_table.takeItem(row + 1, i))
                self.waypoint_widget.coord_table.setCurrentCell(row - 1, column)
            self.waypoint_widget.coord_table.removeRow(row + 1)

    def _open_layer_selection(self) -> None:
        self.config_dlg = LayerSelectDialog(parent=self)
        self.config_dlg.layer_selected.connect(self._handle_layer)
        self.config_dlg.exec_()

    def _handle_layer(self, layer: QgsVectorLayer) -> None:
        for feature in layer.getFeatures():
            point = to_wgs84(
                point=feature.geometry().asPoint(),
                own_crs=layer.crs(),
                direction=QgsCoordinateTransform.ForwardTransform
            )
            self._add_to_table(point)

    def get_locations_from_table(self) -> Union[None, List[List[float]]]:
        rows = self.waypoint_widget.coord_table.rowCount()
        locations = []
        try:
            for row in range(rows):
                lat, lon = self.waypoint_widget.coord_table.item(row, 0), self.waypoint_widget.coord_table.item(row, 1)
                locations.append({"lat": float(lat.text()), "lon": float(lon.text())})
        except Exception as e:
            QMessageBox.critical(self.iface.mainWindow(),
                                 'QuickAPI error',
                                 e)
            return

        points = [QgsPointXY(location["lon"], location["lat"]) for location in locations]

        if len(points) < 2:
            raise InsufficientPoints("Please specify at least two points!")

        locations = [[point.x(), point.y()] for point in points]

        return locations

    @staticmethod
    def get_directions(provider: str, profile: str, method: str, locations: List[List[float]]) -> Direction:
        """Get the directions between locations from the specified provider with the specified method."""
        base_url = "http://localhost:8002" if provider == "Valhalla" else "http://localhost:5000"
        router = get_router_by_name(provider.lower())(base_url=base_url, client=QClient)

        direction_args = {"locations": locations, "profile": profile}
        if provider == "OSRM":
            direction_args.update({"overview": "full"})
        directions = router.directions(**direction_args)

        return directions

    def add_result_layer(self, provider: str, profile: str, directions: Direction) -> None:
        project = QgsProject.instance()
        layer_out = QgsVectorLayer("LineString?crs=EPSG:4326",
                                   f"{provider} Route ({profile})",
                                   "memory")

        line = QgsLineString([QgsPoint(*coords) for coords in directions.geometry])
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry(line))

        layer_out.dataProvider().addFeature(feature)
        layer_out.renderer().symbol().setWidth(1)
        layer_out.updateExtents()
        project.addMapLayer(layer_out)
        self._zoom_to_extent(layer_out, project)
