# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QRoutingDialog
                                 A QGIS plugin
 t
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-07-09
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Chris
        email                : test
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import QtWidgets
from qgis.PyQt.QtGui import QIcon
from qgis.gui import QgisInterface, QgsMapTool, QgsTableWidgetItem
from PyQt5.QtWidgets import QApplication

import json
import os.path
import sys
from qgis.core import (
                        QgsProject,
                        QgsCoordinateTransform,
                        QgsCoordinateReferenceSystem,
                        QgsPointXY,
                        QgsVectorLayer,
                        QgsLineString,
                        QgsFeature,
                        QgsRectangle,
                        QgsPoint,
                        QgsGeometry
                        )
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt.QtCore import QPersistentModelIndex

from ..ui.qrouting_dialog_base_ui import Ui_QRoutingDialogBase
from ..core.maptool import PointTool
from ..util.util import maybe_transform_wgs84
from ..core.client import QClient

current_dir = os.path.dirname(os.path.abspath(__file__))
rp_path = os.path.join(current_dir, "../third_party", "routing-py")
sys.path.append(rp_path)
from routingpy import get_router_by_name


class QRoutingDialog(QtWidgets.QDialog, Ui_QRoutingDialogBase):
    def __init__(self, iface: QgisInterface, parent=None):
        """Constructor."""
        super(QRoutingDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface

        self.point_tool = PointTool(iface.mapCanvas())
        self.last_map_tool: QgsMapTool = None
        add_point_icon = QIcon(":images/themes/default/symbologyAdd.svg")
        remove_points_icon = QIcon(":images/themes/default/mActionRemove.svg")
        add_layer_icon = QIcon(":images/themes/default/mActionAddLayer.svg")
        arrow_up_icon = QIcon(":images/themes/default/mActionArrowUp.svg")
        arrow_down_icon = QIcon(":images/themes/default/mActionArrowDown.svg")
        self.waypoint_widget.add_wp.setIcon(add_point_icon)
        self.waypoint_widget.remove_wp.setIcon(remove_points_icon)
        self.waypoint_widget.add_from_layer.setIcon(add_layer_icon)
        self.waypoint_widget.move_up.setIcon(arrow_up_icon)
        self.waypoint_widget.move_down.setIcon(arrow_down_icon)
        # self.crs_input.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))

        self.finished.connect(self.result)
        self.waypoint_widget.add_wp.clicked.connect(self._add_point)
        self.waypoint_widget.remove_wp.clicked.connect(self._remove_point)

    def mock_result(self, result):
        pass

    def result(self, result):
        if result:
            project = QgsProject.instance()
            rows = self.waypoint_widget.coord_table.rowCount()
            locations = []
            try:
                for row in range(rows):
                    lat, lon = self.waypoint_widget.coord_table.item(row, 0), self.waypoint_widget.coord_table.item(row, 1)
                    locations.append({"lat": float(lat.text()), "lon": float(lon.text())})
            except Exception as e:
                QMessageBox.critical(self.iface.mainWindow(),
                                     'QuickAPI error',
                                     e)
                return
            provider = self.provider.currentText()

            points = [QgsPointXY(location["lon"], location["lat"]) for location in locations]
            locations = [[point.x(), point.y()] for point in points]
            base_url = "http://localhost:8002" if provider == "Valhalla" else "http://localhost:5000"
            profile = "auto" if provider == "Valhalla" else "driving"

            router = get_router_by_name(provider.lower())(base_url=base_url, client=QClient)
            direction_args = {"locations": locations, "profile": profile}
            if provider == "OSRM":
                direction_args.update({"overview": "full"})
            directions = router.directions(**direction_args)
            layer_out = QgsVectorLayer("LineString?crs=EPSG:4326",
                                       f"{provider} Route",
                                       "memory")

            if provider == "OSRM":
                line = QgsLineString([QgsPoint(*reversed(coords)) for coords in directions.geometry])
            else:
                line = QgsLineString([QgsPoint(*coords) for coords in directions.geometry])
            feature = QgsFeature()
            feature.setGeometry(QgsGeometry(line))

            layer_out.dataProvider().addFeature(feature)
            layer_out.renderer().symbol().setWidth(1)
            layer_out.updateExtents()
            project.addMapLayer(layer_out)
            self._zoom_to_extent(layer_out, project)

    def _zoom_to_extent(self, layer, project):
        ext = layer.extent()
        _bbox = []
        min_y, max_x, max_y, min_x = ext.yMinimum(), ext.xMaximum(), ext.yMaximum(), ext.xMinimum()
        for p in [QgsPointXY(min_x, min_y), QgsPointXY(max_x, max_y)]:
            p = maybe_transform_wgs84(
                        p,
                        project.crs(),
                        QgsCoordinateTransform.ReverseTransform,
                    )
            _bbox.append(p)

        self.iface.mapCanvas().zoomToFeatureExtent(
            QgsRectangle(*_bbox)
        )

    def _add_point(self):
        self.hide()
        self.point_tool = PointTool(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.point_tool)
        self.point_tool.canvasClicked.connect(self._add_to_table)
        self.point_tool.deactivated.connect(
            lambda: QApplication.restoreOverrideCursor()
        )

    def _add_to_table(self, point: QgsPointXY):
        row_index = self.waypoint_widget.coord_table.rowCount()
        print(row_index)
        self.waypoint_widget.coord_table.insertRow(row_index)
        self.waypoint_widget.coord_table.setItem(row_index, 0, QgsTableWidgetItem(f"{point.y():.6f}"))
        self.waypoint_widget.coord_table.setItem(row_index, 1, QgsTableWidgetItem(f"{point.x():.6f}"))
        self.waypoint_widget.coord_table.resizeColumnsToContents()
        self.iface.mapCanvas().unsetMapTool(self.point_tool)
        self.show()

    def _remove_point(self):
        row_indices = set(QPersistentModelIndex(index) for index in self.waypoint_widget.coord_table.selectedIndexes())
        for row_index in row_indices:
            self.waypoint_widget.coord_table.removeRow(row_index.row())
